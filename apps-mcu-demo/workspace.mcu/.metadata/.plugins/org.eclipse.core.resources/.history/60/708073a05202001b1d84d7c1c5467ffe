// **************************************************************************
//
//               Demo program for labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 09/2019
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Main program for LEDs
//
// **************************************************************************

#include "mbed.h"

// Serial line for printf output
Serial g_pc(USBTX, USBRX);
// LEDs on K64F-KIT - instances of class DigitalOut
DigitalOut g_led1(PTA1);
DigitalOut g_led2(PTA2);
DigitalOut g_ptc0(PTC0);
DigitalOut g_ptc1(PTC1);
DigitalOut g_ptc2(PTC2);
DigitalOut g_ptc3(PTC3);
DigitalOut g_ptc4(PTC4);
DigitalOut g_ptc5(PTC5);
DigitalOut g_ptc7(PTC7);
DigitalOut g_ptc8(PTC8);
DigitalOut g_red1(PTB9);
DigitalOut g_green1(PTB3);
DigitalOut g_blue1(PTB2);

// Button on K64F-KIT - instance of class DigitalIn
DigitalIn g_but9(PTC9);
DigitalIn g_but10(PTC10);
DigitalIn g_but11(PTC11);
DigitalIn g_but12(PTC12);

void my_blink_function1()
{
	g_led1= !g_led1;
}
void my_blink_function2()
{
	g_led2= !g_led2;
	if(g_but9 == 1)
		g_led2=!g_led2;
	else
		g_led2=0;
}
void my_blink_functionptc0()
{
	g_led2= !g_led2;
	if(g_but10 == 0)
		g_led2=!g_led2;
	else
		g_led2=0;
}

DigitalOut LED[8] = {g_ptc0,g_ptc1,g_ptc2,g_ptc3,g_ptc4,g_ptc5,g_ptc7,g_ptc8};
int brightness1[8] = {0,10,20,30,40,50,60,70};
int timer = 0;
void ledtinker(){
	if(timer >= 25){
		timer = 0;
	}

	for(int i=0; i< 25; i++){
		for(int j=0; j<8;j++){
		int T1 = 25 * brightness1[j] / 100;
		if(timer< T1){
			LED[j] = 1;
		}
		else{
			LED[j] = 0;
		}
	}
	timer++;
	}
}
DigitalOut Color[3] = {{g_red1,0},g_green1,g_blue1};
void ledf(){

	int brightness1[3] = {100,100,100};
		while(1){
			for(int i = 0; i < 2;i++){
				for(int j = 0; j < 3; j++){
				if(i < 2 * brightness1[j]/100)
					Color[j] = 1;
				else
					Color[j] = 0;
				}
			}


		}
}


int main(){
ledf();
/*	Ticker t1;
	t1.attach_us(callback(ledtinker),1000);

	while(1){

	}
*/
	/*	if (c == 25){
		g_ptc1 = (T *c)/100;
					LED[j] = 0;

			}

		}
		for(int i = 0; i < 25;i++){
			for(int j = 0; j < 4; j++)
				if(g_but9 == LED[j])
					brightness1[j]++;
					wait_ms(brightness1[j]);
				else
					brightness1[j]--;
					wait_ms(25 - brightness1[j]);

	}*/
/*	double brightness1 = 10;
		while(1){
			for(int i = 0; i < 25;i++){
				if(i< 25 * brightness1/100)
					g_ptc7 = 1;
				else
					g_ptc7 = 0;

			}
			if(!g_but9 == 0)
				brightness1 = brightness1 + 1;
			if(g_but10 == 0)
				brightness1 = brightness1 - 1;
		}*/

	/*int brightness = 25;
	for(int c=0;c < 25;c++)

		if (c == 25){
		g_ptc1 = (brightness *c)/100;
		wait_ms(brightness-c);


}
}*/

/*	int brightness = 50;
	    while (1){
	        g_ptc0 = 1;
	        for(int i = 0; i < 25;i++){
	        if(i< 25 * brightness/100)
	        {
	            if(g_but9 == 0)
	                brightness++;
	        }

	        if(i > 25 * brightness/100){
	            if(g_but10 == 0)
	                brightness--;
	        }
	    }
	       g_ptc0 = 0;
}*/
	// Serial line initialization
	//g_pc.baud(115200);
	/*Ticker l_my_ticker1, l_my_ticker2;
	l_my_ticker1.attach_us(callback( my_blink_function1 ), 500000);
	l_my_ticker2.attach_us(callback( my_blink_function2 ), 50000);*/

	/*while( 1 );*/
	/*while (1)
	{
		int l_delay = 500;

		g_led1 = !g_led1; 		// invert LED1 state

		if (g_but9 == 0) 		// button pressed?
		{
			l_delay /= 10;		// speed up blinking
			g_led2 = !g_led2;
		}
		else
			g_led2 = 0; 		// LED2 off

		wait_ms(l_delay);
	}*/


}
