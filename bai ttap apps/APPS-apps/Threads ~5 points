//This code generates random numbers (from min to max) into array and then sort the array.
//With threads of course.

// ***********************************************************************
//
// Demo program for subject Computer Architectures and Paralel systems
// Petr Olivka, Dept. of Computer Science, FEECS, VSB-TU Ostrava
// email:petr.olivka@vsb.cz
//
// Threads programming example for Linux (10/2016)
// For the propper testing is necessary to have at least 2 cores CPU
//
// ***********************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <sys/param.h>
#include <pthread.h>
#include <algorithm>
#include <complex>

#define TYPE int

using namespace std;

int compare_ints(const void *p, const void *q) {
    int x = *(const int *) p;
    int y = *(const int *) q;

    if (x < y)
        return -1;
    else if (x > y)
        return 1;

    return 0;
}

class Sort {
public:
    int id;
    int from, len;
    TYPE *data;
    long int data_len; //velikost pole

    Sort(int id, int from, int length, TYPE *data) {
        this->id = id;
        this->from = from;
        this->len = length;
        this->data = data;
    }

    void generate(int max, int min) {
        srand((unsigned int) time(nullptr) + this->from);

        printf("Random numbers generation started...\n");
        fflush(stdout);

        for (int i = 0; i <= this->len; i++)
            this->data[this->from + i] = rand() % (max-min+1)+min; 
    }

    void sort_me() {
        printf("Sort started...\n");
        fflush(stdout);

        qsort(this->data + this->from, this->len, sizeof *this->data, &compare_ints); //Build in C++ func
    }
};

void *my_thread(void *void_arg) {
    auto *ptr_data = (Sort *) void_arg;

    printf("Thread %d started from %d with len %d...\n", ptr_data->id, ptr_data->from, ptr_data->len);

    ptr_data->generate(666,100);
    ptr_data->sort_me();
}

int main() {
    unsigned int my_length = 100;
    unsigned int number_of_threads = 4;

    TYPE *my_array = new TYPE[my_length];
    TYPE *fin_array = new TYPE[my_length];

    auto *ptr = new pthread_t[number_of_threads];//ukazatel na pole vlaken
    auto *arg = new Sort*[number_of_threads];//ukazatel na pole objektu
    if(my_length%number_of_threads==0) {
        for (int j = 0; j < number_of_threads; j++) {
            arg[j] = new Sort(
                    j,
                    j * my_length / number_of_threads,
                    my_length / number_of_threads,
                    fin_array            );
        }
    }
    for (int j = 0; j < number_of_threads; j++) {
        pthread_create(&ptr[j], nullptr, my_thread, arg[j]);
    }

    for (int j = 0; j < number_of_threads; j++) {
        pthread_join(ptr[j], nullptr);
    }
/*
    for (int i =1; i < number_of_threads; i++) {
        int j = i-1;
       for(int j = i+1; j < number_of_threads;i++){

            std::merge(arg[j]->data + arg[j]->from,
                       arg[j]->data + arg[j]->from + arg[j]->len,
                       arg[i]->data + arg[i]->from,
                       arg[i]->data + arg[i]->from + arg[i]->len,
                       fin_array);
       }

    }
    */

    printf("Almost sorted array: \n");
    for(int i = 1; i<my_length;++i) {
        printf("~ %d ", fin_array[i]);
        if ((i%10==0)){
            printf("\n");
        }
    }

}
